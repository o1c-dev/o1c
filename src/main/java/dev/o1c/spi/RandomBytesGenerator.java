/*
 * ISC License
 *
 * Copyright (c) 2021, Matt Sicker
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * SPDX-License-Identifier: ISC
 */

package dev.o1c.spi;

import org.jetbrains.annotations.NotNull;

/**
 * Generates random data suitable for cryptographic applications such as key and nonce generation.
 */
public interface RandomBytesGenerator {
    /**
     * Generates the requested number of bytes.
     *
     * @param nrBytes number of bytes to generate
     * @return the requested number of randomly generated bytes
     */
    default byte @NotNull [] generateBytes(int nrBytes) {
        byte[] bytes = new byte[nrBytes];
        generateBytes(bytes);
        return bytes;
    }

    /**
     * Generates random bytes and writes them to the provided array.
     *
     * @param out destination buffer to write random bytes to
     */
    default void generateBytes(byte @NotNull [] out) {
        generateBytes(out, 0, out.length);
    }

    /**
     * Generates random bytes and writes them to the provided slice.
     *
     * @param out    array to write random bytes to
     * @param offset where to begin writing
     * @param length how many bytes to generate
     */
    void generateBytes(byte @NotNull [] out, int offset, int length);
}
